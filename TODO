DOCUMENTATION

* make sure all errors we can emit are documented.

* mini comparisons with Java, Perl, Python, and Ruby (meant as tutorials for experienced programmers, rather than stupid "language X is better than Y" nonsense).

* tutorial.

* add some way to doc-comment class, function, and variable definitions. documentation should be available at run-time, and should be available for automatic dumping (like --dump-classes or a  better version of Ruby's ri).

* more demos.
* morse code encode/decode. (sound!)
* resistor value calculator. (color ascii-art, simple math.)
* calculator, programmable calculator, graphical calculator.
* hangman game.
* tic-tac-toe, connect four?
* roman numerals.

Limbo:
* http://www.vitanuova.com/inferno/papers/limbo.html (reference)
* http://www.vitanuova.com/inferno/papers/descent.html (tutorial & demos)

Alef:
* http://doc.cat-v.org/plan_9/2nd_edition/papers/alef/ref (reference)
* http://doc.cat-v.org/plan_9/2nd_edition/papers/alef/ug (user guide)

* http://merd.sourceforge.net/pixel/language-study/scripting-language/

* http://www.angelfire.com/tx4/cus/shapes/index.html

* http://merd.sourceforge.net/pixel/language-study/various/is-a-cow-an-animal/

* semi-automate the generation of the "built-in functions" section in the man page, as with the class summary.

* semi-automate the generation of the "built-in variables" section in the man page, as with the class summary.



TESTING

* fix the tests to use "assert", so we get assertion failures if anything goes wrong.

* increase test coverage. work out how to measure coverage; emma.sourceforge.net doesn't work with any jessies.org projects (why not?).

* benchmarking. (i.e. automated performance testing.) maybe a directory of programs, each written in both Talc and Java, and a script to run them against one another, checking for changes in the relative (percentage?) runtime. should be able to refer to some of the demos, too: mandelbrot.talc is a decent performance test for some areas.



MISSING FEATURES

* finish user-defined classes.
  [x] instance fields
  [ ] allow field definitions without initializers ("x: int;")
  [x] instance methods
  [ ] class methods
  [ ] class fields
  [ ] "extends"
  [ ] check for inheritance cycles.
  [ ] abstract methods
  [ ] "interface" and "implements"
  [ ] final/synchronized methods (?)
  [ ] "final" (and make all built-in classes final?)

* static member functions. something like the sorely-needed n_copies methods need to be static methods.

* should field declarations insist on an initializer? in practice it seems like you often can't say anything useful until the constructor. which suggests either a Ruby-like style for declaring member variables, or that we should relax the insistence on initializers for fields.

* should we offer multiple variable definitions like "x, y, z := 0;"? what would "l1, l2 := [];" mean? should they point to the same list or different lists?

* [medium] implement the ? : ternary operator.

* [hard] exceptions, try-catch-finally, throw.

* should "import" strip executable code? a .talc file that's imported imports only the definitions. you could have arbitrary code in there for testing purposes, or so a .talc file can be used as a script (i.e supply its own main program), but when imported, that stuff's just ignored.

* add "set.talc" as an example, implementing the equivalent of Java's HashSet. (would require user-defined parametric types!)

* should add an "Iterable" interface, change for-each to expect its expression has that type and then invoke "Iterable.iterator()" and use it. (though how does that get us keys as well as values? maybe not "Iterable" so much as "ForEachAble<K,V>"? "has_next() : bool", "key() : K", and "value() : V"?)

* given an "Iterable" interface, we can offer range literals like 3..6 so you can write "for (i in 3..6) {}" without having to actually have a list of the numbers as we would at present. range literals also let us implement slicing. we could do that with name[3,6] instead, but i'd like to reserve indexing with comma in case we ever support multi-dimensional array indexing more directly than the usual Java style.

* warnings about hiding? what kinds are okay and what kinds aren't? i think we should outlaw all hiding.

* implement an explicit regexp type? literals? a literal would give us compile-time regexp checking and ahead-of-time/once-off Pattern compilation. we'd have to go back over core library and see where we could usefully use regexp instead of string. (overloading might be handy.)

* [medium] overloaded methods/functions. useful for "system". probably some restriction like "no ambiguous/confusing overloads (ones where compile-time selection of an overload could produce different results than you'd expect if you thought overloads were selected at run-time)". http://www.informit.com/articles/article.aspx?p=31551&seqNum=4&rl=1

* [hard] function types, so we can add something like list<T>.map(function(e:T):T):list<T>.
 + parallel map.

* [hard] operator overloading?

* [hard] check that you can't drop off the bottom of a non-void function (i.e. must "return").

* [future] consider "to_b" to make the "match" idiom even more comfortable. too liable to be abused?

* [future] Pike talks about reducing "stutter" in Sawzall, which is certainly a problem in Java (especially since generics), though not yet in Talc thanks to type inference and richer literals. Here's what Pike said:
  Conversion operators translate values from one type to another, and encapsulate a wide range of conversions. For instance, to extract the ﬂoating point number represented by a string, one simply converts the value:
    f: float;
    s: string = "1.234";
    f = float(s);
  Some conversions take parameters; for example
    string(1234, 16)
  generates the hexadecimal representation of the integer, while
    string(utf8_bytes, "UTF-8")
  will interpret the byte array in UTF-8 representation and return a string of the resulting Unicode character values.
  For convenience, and to avoid the stutter endemic in some languages’ declaration syntaxes, in initializations the appropriate conversion operation (with default parameter values) is supplied implicitly by the compiler. Thus
    b: bytes = "Hello, world!\n";
  is equivalent to the more verbose
    b: bytes = bytes("Hello, world!\n", "UTF-8");

* [future] some kind of equivalent of ObjC's "describe"/Ruby's "inspect"? maybe machine-generated?

* [future] is a "switch" statement sufficiently useful to be worth adding? what kind?

* [future] do we need a "char" primitive type? scripting languages' higher-level string operations make most char-grubbing unnecessary. single-character strings might be sufficient. explicit char support might be clearer/more natural for the target audience. (but if we give them char, will they waste time doing C-like string manipulation instead of learning the higher-level stuff?) or int.to_char():string and string.asc():int (like Perl chr/ord)? we currently have the former but not the latter, and it actually works okay, though the name is a bit awkward.

* [future] if we're going to have varargs "print" and "puts" built-ins, should we offer the same to user-defined functions? note that print and puts are special not only in that they can have any number of arguments, but also in that each argument can have a different type (though we could say they take object... [or whatever our notation is] because we call to_s on each argument; this would be cleaner and simpler). note that C-style varargs have problems compared to passing around a list, so really i'm talking about Java-like syntactic sugar (removing the need for [ and ] around the expression list), though at a loss of expressiveness and increase in complication. i think this is a questionable idea, but so is having magic "print" and "puts", but their functionality is invaluable in easing people into the water.



LIBRARY

http://www.ferite.org/ - quite nice; good documentation. future plans smelled of overcomplexificationing. wonder what it died of? and how Talc can avoid the same fate?

http://blogs.sun.com/chrisoliver/resource/f3.html - "format as" looks interesting. otherwise quite nasty.

http://pike.ida.liu.se/generated/manual/modref/

http://fandev.org/doc/docCookbook/Files.html

C#'s System.IO.File is pretty nice, though i'm unconvinced by the the File/Directory split. note that their File only has static methods that take String pathnames. there's a separate FileInfo class (like "struct stat").

# environment variables
should "getenv" be generalized to ENV:map<string, string>? probably needs to be a special type with JNI-backed get and put that actually modify the environment. will that upset the JVM?
how should we offer access to Java's system properties? there's quite a parallel with environment variables, so we should probably follow a similar route.
we should offer Talc version information to interested scripts. how? system property? global variables? something like TALC_VERSION: string = "1.7.3" would be simplest, but there are lots of alternatives, and we should probably wait until we have a concrete need to distinguish versions (though that will, of course, be too late for someone).

should exit call System.exit or raise a SystemExitException as in most scripting languages?
die(...):void - puts(...);exit(1); # should output to stderr. include source location? warn() too?
sleep(ms:int):void # what time unit? integer ms? real s?

# subprocesses
should "shell" and "system" use a "status" type instead of "int" for the exit code making it easier to check for signals and the like?
should "shell" and "system" actually just be two overloaded "system" methods?
what should "backquote" do with the exit code?
should we offer an ability to separate stdout and stderr? to run in a specific directory?

object.compareTo # or comparable interface?
object.equals # have == call "equals", but have the default "equals" be identity? auto-generate field-by-field "equals"?
object.hashCode # or hashable interface (also requiring "equals")?

int.to_s(base:int) # currently, we don't have overloading, so this is called int.to_base(base:int).

TalcPrimitives: chmod, chown, lstat, stat

shouldn't "file" really be "path"?
file.basename():file
file.dirname():file
file.chmod(mode:int):bool # plus symbolic constants?
file.chown(uid:int, gid:int):bool
file.is_reg():bool # et cetera? or should all this stuff be via stat?
file.glob(pattern:string):list<string> # should support zsh-like ** patterns.
file.lstat():stat
file.stat():stat
file.readdir():list<stat> # file.children():list<string> or somesuch?
file.delete():bool

url.read():string # read entire url as one string so people don't have to mess with curl(1)/wget(1).

string.substring(offset:int, length:int):string # or startIndex/endIndex? is this actually useful?
string.chomp():string # remove trailing newline; do we need this, given trim? Python doesn't seem to. mad mentions having had to fix a bug in a script relating to chomp ignoring '\r'.

# convenient tty interface. not sure about the exact API. "no worse than basic".
tty.clear():void
tty.at(x:int, y:int):void # move cursor
tty.fg() / tty.bg() # change colors? how to specify black/red/green/yellow/blue/magenta/cyan/white? (also distinguish default from black.)
tty.isatty():bool
tty.readline() # some kind of interface to GNU readline; maybe fall back to a stupid implementation. see also libjline-java (in Debian and RedHat distros).
tty.input_int(), tty.input_real() # specializations for numeric input, refusing bad input?

# convenient graphics interface ("picture"?) for PNG/SVG, and so on.
color.color(r:int,g:int,b:int,a:int):color # and so forth
picture.fg(c:color):void / picture.bg(c:color):void
picture.move_to(x:int,y:int):void
picture.line_to(x:int,y:int):void
picture.move_by(dx:int,dy:int):void
picture.line_by(dx:int,dy:int):void
picture.font(family:string, size:int):void # how best to specify style?
# ...plus rectangles, circles, ellipses, filled/outline.
# some notion of paints for gradients?

# random class backed by java.util.Random
random.reset(seed:int):void
random.next_int(n:int):int
random.next_real():real
RANDOM:random # convenience instance
int.random(n:int):int # convenience using global RANDOM [done]
real.random():real # convenience using global RANDOM

# primitive access to the underlying JVM?
jvm.new_instance(class_name:string, args:list<object>):object # what about overloading?
jvm.get_field(instance:object, field_name:string):object
jvm.put_field(instance:object, field_name:string, value:object):void
jvm.get_static(class_name:string, field_name:string):object
jvm.put_static(class_name:string, field_name:string, value:object):void
jvm.invoke_static(class_name:string, method_name:string, args:list<object>):object # what about overloading?
jvm.invoke_method(class_name:string, method_name:string, instance:object, args:list<object>):object # what about overloading?

# language-level access?
extern "Java" class Random = "java.util.Random"; # uses reflection to fill in the methods.
extern "Java" E: real = "java/lang/Math:E";
extern "Java" PI: real = "java/lang/Math:PI";

# primitive access to the C library/POSIX/arbitrary shared libraries?
# maybe extern "C" via JNA (https://jna.dev.java.net/) would avoid the need to write this stuff ourselves?
dl.open(library_name:string):object # return some kind of object representing the library? or void?
dl.invoke(library:object, function_name:string, args:list<object>):object # or pass the library name each time?
dl.close() # worth offering? bad usefulness/safety trade-off?
# slightly higher-level, safer, and more convenient would be an interface to libffi.
# most trivially:
ffi.call(function_name: string, return_type_descriptor:string, argument_type_descriptors:list<string>, args:list<object>):object
# but it might be nice to offer the same "ffi_prep_cif"/"ffi_call" distinction as libffi.
# it would also be awesome to offer an interface to ffi_type, and the ability to pass/return structs.

Perl/Python/Ruby-like tr/tr_d? sufficiently useful?
should ARGV0 be of type "File" rather than "string"?
access to stderr? ability to print/puts to files/sockets/pipes?

should we have an "sprintf" to complement "printf"? or string.format? non-static? (i.e. "%2x".format(count) versus string.format("%2x", count).)

# the need for these is demonstrated by "binomial-triangle.talc"...
list<T>.n_copies(n:int,item:T):list<T> # returns a new list with 'n' copies of 'item'.
list<T>.copy():list<T> # clone/copy the list. need such a method on all mutable containers.
string.n_copies(n:int,s:string):string # returns a new string of 'n' concatenated copies of 's', or, better...
string.dup(n:int):string # returns a new string of 'n' concatenated copies of 'this'
some kind of "format using" functionality.

time_s() : int # like Unix time(0).
time_ms() : int # like System.currentTimeMillis.
time_ns() : int # like System.currentTimeNanos.
some kind of class like our StopWatch.

something like Basic's ability to turn function-call tracing on? generate suitable byte-code to output something on every method entry/exit, nicely lined-up and with arguments and return values?

should list<t>.peek_back and list<T>.peek_front just be "back" and "front"?
should list<t>.pop_back and list<T>.push_back just be "pop" and "push"?
should we have list<T>.find(e:T):int ? should it take a start_index:int too, or return list<int>?
should FILE_SEPARATOR and PATH_SEPARATOR be in class "file"?

make sure all "value" classes return sensible hashCodes!

simple input/output of CSV, TSV, XML, JSON (http://en.wikipedia.org/wiki/JSON). (anything else common?)
encode/decode base64, uri.
Perl-like pack/unpack?
gzip compress/decompress.
adler32/crc.

something like getopt. i've never seen a really convincing library for command-line arguments, but we should offer something.



LANGUAGE DEFECTS

* we need to give indexing expressions their own AstNode, i think.
      a[i] = 0;        # OK
      x = a[i];        # OK
      a[i] = a[i] + 1; # OK
      a[i] += 1;       # ERROR
      a[i]++;          # ERROR
      ++a[i];          # ERROR
  it's a mistake to translate [] and []= in the parser. i think we do need some kind of AstNode.IndexExpression, and to do the __get_item__/__set_item__ translation in a context-sensitive way. not clear on the details, but this will have to be looked at eventually. i don't mind outlawing ++ and -- on these expressions, but compound assignment seems like something that should work.

* in Java "assert 0 == 0 == 0;" won't compile, with the complaint that you can't compare boolean with int. in Talc, you get a surprising result instead.

* is the colon before a return type useful? "function f() string { ... }" would work equally well. but then how about the more C-like "function string f() { ... }"? this seems to conflict with the earlier idea of having a shorthand "function f() { ... }" for void functions, but we could still treat a missing return type as "void" (assuming we even decide this shorthand is a good idea).

* alternatively, we could lose the "function" keyword completely. as long as you have to write the parentheses for empty formal argument lists, functions and variables aren't ambiguous because at any given scope, only one or the other is valid. "function" is potentially useful for expressing function types, such as the first argument to a functional "map", for example. (though "func" or "fn" might also be worth considering, if we're really into the whole brevity thing.)



QUALITY OF IMPLEMENTATION

* report better errors than 'no instance method "__get_item__" in class int' for talc -e '1[23];'.
  how public should those special names be?
  are we up-front about this, and using it as a mechanism for user-defined classes to support [] and []=?
  i don't think that's such a bad idea, compared to "operator []" and the like.
  but we should still talk to the user in terms of what they wrote.

* report sensible error (instead of stack overflow in the type inference code) for:
s : = "x";
if (x.starts_with("/")) {
  s := "x" + s;
}

* report sensible error when global function used before definition. (or cope, as we do with methods? global variables obviously shouldn't be treated like fields in terms of usability before definition, and global functions can refer to global variables, so presumably we should treat global functions specially to avoid this kind of weirdness?)

* improve Lexer.getLocation so we provide the start and end line/column rather than just the end (even just the start would be better than just the end, as we have at the moment; error messages point to the end of the problem where the start would be more natural).



LAUNCHER

* add a native (C++) driver so we can put a binary in /usr/bin and use Talc directly in executable scripts.



JVM CODE GENERATOR

* in the JVM code generator, we should try to reuse local variable slots when variables go out of scope. at the moment, we have really large numbers of locals which (a) makes verifier output hard to read and (b) isn't very Java-like, which may mean Hotspot isn't adapted to it. we probably need to switch to a BitSet to implement this correctly.

* is it a mistake to generate the global code in the constructor? should it be in "main" instead? (or at least some kind of secondary static void method to keep the generated boilerplate of main distinct.)

* FunctionDefinition and VariableDefinition should have a common ancestor so we can treat them more uniformly. This will probably simplify some of the code.

* should we use List<VariableDefinition> (with null initializers?) in AstNode.FunctionDefinition for the parameter list?

* should have an arbitrary-arity string concatenation AstNode. the simplifier should collect them up, and then the code generator can generate optimal code. (though the current simple scheme does pretty well. i wonder how long chains of string concatenation get in real-life code?)

* we could replace RealValue with java.lang.Double but we'd need to put all the RealValue methods somewhere. more useful would be replacing LRealValue; with D. it's not too hard to treat "real" as a primitive double and call static (DD)D methods in RealValue (i've done it, as proof), but boxing and unboxing where necessary to maintain the illusion that "real" is an object type might be hard.

* BooleanValue is more convenient than Boolean because we know there are only two instances and can compare them by identity. given the price of getstatic, it might be worth investigating converting BooleanValue to I in generated loops and conditionals (where generated boilerplate is the consumer of the BooleanValue).

* JvmTalcConstantPool shouldn't store duplicates. (how important is that? the constant pool itself isn't a particularly convincing performance win. maybe optimizing IntegerValue construction would have been more useful? or implementing SmallIntegerValue and LargeIntegerValue or somesuch.)
