n : int = 1;
function double(n : int) : int { return 2*n; }
puts(double(3));
puts(n); # should be 1

function hello() : bool { puts("hello"); return true; }
function world() : bool { puts("world"); return true; }
true || world();
false || hello();
true && world();
false && hello();

function to_s(n:int):string {
  if (n == 0) {
    return "zero";
  } else if (n == 1) {
    return "one";
  } else {
    return "many";
  }
}
s : string = "";
for (i : int = 0; i < 5; ++i) {
  s += to_s(i) + " ";
}
puts(s);

function triangular_number(n : int) : int {
  j : int = 0;
  for (i : int = 1; i <= n; ++i) {
    j += i;
  }
  return j;
}
for (i:int = 0; i < 20; ++i) {
  print(i, "\t", triangular_number(i), "\n");
}

function name_from_list(n : int) : string {
  names:list<string> = [ "one", "two", "three" ];
  name:string = names[n - 1];
  return name;
}

#names:map<int,string> = [ 1:"one", 2:"two", 3:"three" ];
names:map<int,string> = new map<int,string>();
names[1] = "one"; names[2] = "two"; names[3] = "three";
function name_from_map(n:int):string {
  return names[n];
}

for (i:int = 1; i < 4; ++i) {
  puts(i, "\t", name_from_list(i), "\t", name_from_map(i));
}
puts(names.has_key(1), " ", names.has_key(12));
puts(names.has_value("one"), " ", names.has_value("many"));
puts(names);

puts("--");
keys: list<int> = names.keys();
puts(keys);
values: list<string> = names.values();
puts(values);
puts("--");

puts("size=", names.size());
puts(names.remove(2));
puts("size=", names.size());
puts(names.clear());
puts("size=", names.size());
