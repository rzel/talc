#!/usr/bin/talc

# Finds prime numbers using the Sieve of Eratosthenes method.
# http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes

size := 10000;

# FIXME: list should have something like n_copies(n: int, item: T).
function list<bool> n_trues(n: int) {
    result: list<bool> = [];
    for (i := 0; i < n; ++i) {
        result.push_back(true);
    }
    return result;
}

start_time := time_ms();

# FIXME: this would be more space-efficient if we had a BitSet.
sieve : list<bool> = n_trues(size);

for (k := 2; k < size; ++k) {
    if (!sieve[k]) {
        continue;
    }
    for (i := 2*k; i < size; i += k) {
        sieve[i] = false;
    }
}

# FIXME: this would be clearer if we had a BitSet.
count := 0;
for (i := 2; i < size; ++i) {
    if (sieve[i]) {
        ++count;
    }
}
puts("Found ", count, " primes under ", size, " in ", (time_ms() - start_time), "ms.");
exit(0);
