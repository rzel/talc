#!/usr/bin/talc

# FIXME: support official builds. (hard because you have to accept a license on the web page.)

# Where to look locally for already-installed JDKs.
local_jdks_directory := "/usr/java/";

# Where to look on the internet for available JDKs.
sun_site := "http://download.java.net";
sun_binaries_url := sun_site + "/jdk7/binaries/";

jdk_version := "jdk1.7.0";

should_be_quiet := false;

# Output an error message and exit.
function die(message: string) : void {
  puts(message);
  exit(1);
}

# Get the OS in Sun's nomenclature.
function desired_os() : string {
  # FIXME: this works for "Linux" -> "linux", but not for the other OSes Sun supports.
  return backquote("uname").trim().lc();
}

# Get the architecture in Sun's nomenclature.
function desired_arch() : string {
  desired_arch := backquote("uname -m").trim();
  desired_arch = desired_arch.replace(@"^i\d86$", "i586");
  if (desired_arch == "x86_64") {
    desired_arch = "x64";
  }
  return desired_arch;
}

function install_changes_html(jdk_build_number: string) : void {
  url := "http://download.java.net/jdk7/changes/jdk7" + jdk_build_number + ".html";
  if (url != null) {
    puts("Downloading " + url + "...");
    system(["wget", "--no-verbose", "--output-document=" + local_jdks_directory + "/" + jdk_version + jdk_build_number + "/changes.html", "--no-check-certificate", url]);
  }
}

function install_jdk(jdk_url, jdk_filename, jdk_build_number: string) : void {
  if (new file(local_jdks_directory).is_directory() == false) {
    die("You need to create the " + local_jdks_directory + " directory before you can use this script.");
  }
  if (new file(local_jdks_directory + "/" + jdk_version + jdk_build_number).is_directory()) {
    if (should_be_quiet == false) {
      puts("You already have the latest JDK build installed (1.7.0" + jdk_build_number + ")");
    }
  } else {
    puts("Downloading JDK 1.7.0" + jdk_build_number + "...");
    system(["wget", "--no-verbose", "--output-document=/tmp/" + jdk_filename, jdk_url]);
    
    # This lets us run the installer from cron, by accepting the license for us.
    original_installer := "/tmp/" + jdk_filename;
    modified_installer := "/tmp/" + jdk_filename + "-auto.bin";
    shell("sed 's/^more <<\"EOF\"$/cat <<\"EOF\"/;s/^ *read reply leftover$/reply=YES/' < " + original_installer + " > " + modified_installer);
    
    # Run the installer.
    shell("cd " + local_jdks_directory + " && bash " + modified_installer + " && rm " + modified_installer + " && rm " + original_installer);
    
    # Give this build a unique name, so we can install as many as we like.
    shell("cd " + local_jdks_directory + " && mv " + jdk_version + " " + jdk_version + jdk_build_number);
    
    # Extract the supplied class library source.
    shell("cd " + local_jdks_directory + "/" + jdk_version + jdk_build_number + " && mkdir src && cd src && ../bin/jar xf ../src.zip && rm ../src.zip");
    
    install_changes_html(jdk_build_number);
  }
}

function check_web_site() : void {
  for (line in backquote("wget -q -O - " + sun_binaries_url).split("\n")) {
    m := line.match("href=\"(.*(jdk-7.*(-b\\d+).*\\.(?:bin|exe|sh)).*)\"");
    if (m != null) {
      jdk_url := m.group(1);
      jdk_filename := m.group(2);
      jdk_build_number := m.group(3);
      
      if (jdk_url.starts_with("/")) {
        jdk_url = sun_site + jdk_url;
      }
      
      # Ignore JDKs for other OSes/architectures, and ignore RPMs.
      if (jdk_url.contains("-rpm.bin")) { continue; }
      if (jdk_url.contains(desired_os()) == false) { continue; }
      if (jdk_url.contains(desired_arch()) == false) { continue; }
      
      install_jdk(jdk_url, jdk_filename, jdk_build_number);
    }
  }
}

function main() : void {
  accept_sun_license := false;
  for (arg in ARGS) {
    if (arg == "-q") {
      should_be_quiet = true;
    } else if (arg == "--accept-sun-license") {
      accept_sun_license = true;
    } else {
      die("usage: " + backquote("basename " + ARGV0).trim() + " [-q] --accept-sun-license");
    }
  }
  
  if (accept_sun_license == false) {
    die("You must accept Sun's license with --accept-sun-license to run this script.");
  }
  
  check_web_site();
}

main();
