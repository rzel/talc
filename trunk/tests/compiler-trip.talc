#!/usr/bin/talc

# Test assertions.
assert true;
assert 0 == 0;

# Test Unicode escapes in string literals.
assert "\u0068\u0065\u006c\u006c\u006f\u0020world" == 'hello world';
assert 'Copyright \u00A9 2007, Elliott Hughes' == "Copyright Â© 2007, Elliott Hughes";

i := 0;

if (true) {
 ++i;
} else {
 assert false;
}

if (false) {
 assert false;
} else {
 ++i;
}

if (true) {
 ++i;
}

if (false) {
 assert false;
}

puts([true, false]);
puts(true, false);
puts(true);
puts(false);
["hello", "world"];
puts(1, 2, 3, 4);
puts([1, 2, 3, 4]);

if (true) {
 ++i;
} else {
 assert false;
}

if (!true) {
 assert false;
} else if (!false) {
 ++i;
} else {
 assert false;
}

if (false && true) {
 assert false;
}
if (true && false) {
 assert false;
}
if (true && true) {
 ++i;
}
if (false && false) {
 assert false;
}

if (false || true) {
 ++i;
}
if (true || false) {
 ++i;
}
if (true && true) {
 ++i;
}
if (false && false) {
 assert false;
}

if (true == false) {
 assert false;
}
if (false == true) {
 assert false;
}
if (true == true) {
 ++i;
}
if (false == false) {
 ++i;
}

if (true != false) {
 ++i;
}
if (false != true) {
 ++i;
}
if (true != true) {
 assert false;
}
if (false != false) {
 assert false;
}

# Test unary and binary operators.
assert 1! == 1;
assert 2! == 2;
assert 3! == 6;
assert 4! == 24;
assert 5! == 120;
assert 6! == 720;
assert 7! == 5040;
assert 2 == 1 << 1;
assert 1 << 10 == 1024;
assert 1024 >> 2 == 256;
assert -1 * 1024 == -1024;
assert 1024 % 2 == 0;
assert 1025 % 2 == 1;
assert (7 & 2) == 2;
assert (2 | 3) == 3;
assert (2 ^ 3) == 1;
assert (2 ** 3) == 8;
assert (-3 ** 2) == -9;
assert -1024 - -1024 == 0;
assert 3*4 == 12;
assert 3.0*4.0 == 12.0;
assert "hello" != null;
assert 1 + 1 == 2;
assert 1.0 + 1.0 == 2.0;
assert "hello" + " " + "world" == "hello world";
assert 1 < 2;
assert 2 > 1;
assert !(1 > 1);
assert !(1 < 1);
assert 1 <= 1;
assert 1 <= 2;

# Arithmetic tests (from http://www.isthe.com/chongo/tech/comp/calc/calc-whatis.html).
assert 3*(4+1) == 15;
assert 3 * 19 ** 43 - 1 == 29075426613099201338473141505176993450849249622191102976;
assert (2**23209-1)%(2**127-1) == 39614081257132168796771975167;

if (true) {
 ++i;
} else if (true) {
 assert false;
} else if (true) {
 assert false;
} else if (true) {
 assert false;
} else if (true) {
 assert false;
} else {
 assert false;
}

assert i == 14;

{
 three := (1 + 2);
 assert three == 3;
}

# Test compile-time string concatenation.
{
 s := ("hello" + " " + "world");
 assert s == "hello world";
}

# Test order of evaluation.
{
 s:string = "one";
 if (s.starts_with(s = "two")) {
  assert false;
 }
}

# Test null and some aspects of the type system.
{
 o:object = null;
 
 assert o == null;
 o = 2;
 assert o == 2;
 assert o.to_s() == "2";
 o = "hello";
 assert o == "hello";
 
 i:int = null;
 i = 2;
 
 s:string = null;
 s = "hello";
 
 strings:list<string> = null;
 strings = [ "1", "2" ];
 
 objects:list<object> = [ 1, 2 ];
 s1 := "";
 for (i := 0; i < objects.size(); ++i) {
  s1 += objects[i].to_s();
 }
 
 objects = strings;
 # FIXME: how do we test that you couldn't say "strings = objects;"?
 
 s2 := "";
 for (i:int = 0; i < objects.size(); ++i) {
  s2 += objects[i].to_s();
 }
 
 assert s1 == s2;
}

# Test "do" loops.
{
 i := 0;
 do {
  ++i;
 } while (i < 5);
 assert i == 5;
}

# Test "for" loops.
{
 # Tests that we cope when any part of a "for" statement is missing.
 
 # No initializer.
 {
  i := 0;
  j := 0;
  for (; i < 5; ++i) {
   ++j;
  }
  assert i == 5;
  assert j == 5;
 }
 
 # No increment.
 {
  j := 0;
  for (i := 0; i < 5;) {
   ++i;
   ++j;
  }
  assert j == 5;
 }
 
 # No condition.
 {
  j := 0;
  for (i := 0; ; ++i) {
   if (i >= 5) {
    break;
   }
   ++j;
  }
  assert j == 5;
 }
 
 # Tests the for-each functionality.
 words:list<string> = ["this", "is", "a", "test"];
 
 # For-each with index.
 {
  j := 0;
  for (i, word in words) {
   assert words[i] == word;
   ++j;
  }
  assert j == words.size();
 }
 
 # For-each without index.
 {
  j := 0;
  for (word in words) {
   assert words[j] == word;
   ++j;
  }
  assert j == words.size();
 }
}

# Test "while" loops.
{
 i := 0;
 while (i < 5) {
  ++i;
 }
 assert i == 5;
}

# Check that function arguments and locals are distinct from globals.
# (It's an error to attempt to hide a function argument with a local, so
# that case isn't tested.)
n : int = 1;
m : int = 1;
function double(n : int) : int { m := 2; assert m == 2; return 2*n; }
assert double(3) == 6;
assert n == 1;
assert m == 1;

# Test short-circuit relational operators with function calls.
function okay_to_call() : bool { assert true; return true; }
function not_okay_to_call() : bool { assert false; return true; }
{
 true || not_okay_to_call();
 false || okay_to_call();
 true && okay_to_call();
 false && not_okay_to_call();
}

# Check that we don't evaluate the explanatory expression of an assertion
# unless it fails.
assert true : not_okay_to_call();

# Two ways to translate a small int into a string.
function name_from_list(n : int) : string {
 names:list<string> = [ "one", "two", "three" ];
 name:string = names[n - 1];
 return name;
}
# FIXME: what should we do about map literals?
names:map<int,string> = new map<int,string>();
names[1] = "one"; names[2] = "two"; names[3] = "three";
function name_from_map(n:int):string {
 return names[n];
}
# Check the two functions are equivalent.
for (i:int = 1; i < names.size(); ++i) {
 assert name_from_list(i) == name_from_map(i);
}

# Test map methods.
{
 assert names.has_key(1);
 assert !names.has_key(12);
 assert names.has_value("one");
 assert !names.has_value("many");
 assert names.to_s() == "[1:one, 2:two, 3:three]";
 keys: list<int> = names.keys();
 assert keys.to_s() == "[1, 2, 3]";
 values: list<string> = names.values();
 assert values.to_s() == "[one, two, three]";
 assert names.size() == 3;
 assert names.remove(2).to_s() == "[1:one, 3:three]";
 assert names.size() == 2;
 assert names.clear().to_s() == "[:]";
 assert names.size() == 0;
}

# Test lists.
{
 words:list<string> = [];
 words.push_back("hello");
 words.push_back("world");
 assert words == [ "hello", "world" ];
 assert words != "helloworld";
 assert words.to_s() == "[hello, world]";
 assert words != "[hello, world]";
 assert words != [ "hello", "world", "monkeys" ];
 assert words != [ "world", "hello" ];
 
 nums:list<int> = [];
 nums.push_back(0);
 nums.push_back(1);
 assert nums == [ 0, 1 ];
 assert nums != "01";
 assert nums.to_s() == "[0, 1]";
 assert nums != "[0, 1]";
 assert nums != [ 0, 1, 2 ];
 assert nums != [ 1, 0 ];
}
function string_list_size_to_s(strings: list<string>): string {
 return strings.size().to_s();
}
assert string_list_size_to_s(["hello", "world"]) == "2";
assert string_list_size_to_s([]) == "0";

# Check we can have a global function called to_s.
function to_s(n:int):string {
 return n.to_s();
}
{
 s : string = "";
 for (i : int = 0; i < 5; ++i) {
  s += to_s(i) + " ";
 }
 assert s == "0 1 2 3 4 ";
}

# Check that two way of computing the nth triangular number are equivalent.
# Test iteration.
function triangular_number_1(n : int) : int {
 j : int = 0;
 for (i : int = 1; i <= n; ++i) {
  j += i;
 }
 return j;
}
# Test exponentiation.
function triangular_number_2(n : int) : int {
 return (n**2 + n) / 2;
}
for (i:int = 1; i < 200; ++i) {
 assert triangular_number_1(i) == triangular_number_2(i);
 assert (triangular_number_2(i) + triangular_number_2(i+1)) == (i + 1)**2 : triangular_number_2(i);
}

# Test basic user-defined type functionality.
class EmptyClass {
 function EmptyClass() : EmptyClass {
  // Check that we can call a method from the constructor.
  m();
 }
 
 function m() : void {
  // Check that we can call a method from a method.
  assert m2();
  // Check that we can call the special to_s/toString method.
  assert to_s() == "!";
 }
 
 function m2() : bool {
  return true;
 }
 
 function to_s() : string {
  return "!";
 }
}

{
 empty := new EmptyClass();
 assert empty.m2();
 assert empty.to_s() == "!";
 o : object = empty;
 assert empty.to_s() == o.to_s();
}

class Point {
 x: int = 0;
 y: int = 0;
 
 function Point(x0: int, y0: int) : Point {
  x = x0;
  y = y0;
 }
 
 function x() : int {
  return x;
 }
 
 function y() : int {
  return y;
 }
 
 function moveBy(dx: int, dy: int) : void {
  x += dx;
  y += dy;
 }
 
 function moveTo(x0: int, y0: int) : void {
  x = x0;
  y = y0;
 }
 
 function to_s() : string {
  return "(" + x.to_s() + "," + y.to_s() + ")";
 }
}

{
 origin := new Point(0, 0);
 assert origin.to_s() == "(0,0)";
 p := new Point(3, 4);
 assert p.to_s() == "(3,4)";
 p.moveBy(-2 * p.x(), -2 * p.y());
 assert p.to_s() == "(-3,-4)";
}

# Test the string methods.
{
 s := "Hello, World!";
 assert s == "Hello, World!";
 assert s.uc() == "HELLO, WORLD!";
 assert s == "Hello, World!";
 assert s.lc() == "hello, world!";
 assert s.lc_first() == "hello, World!";
 assert s.lc().uc_first() == "Hello, world!";
 
 assert s.contains("lo");
 assert !s.contains("ol");
 assert s.ends_with("!");
 assert !s.ends_with("H");
 assert s.starts_with("H");
 assert !s.starts_with("!");
 assert "  Hello, World!  ".trim() == s;
 
 assert s.replace("l", "L") == "HeLLo, WorLd!";
 assert s.replace(",", "") == "Hello World!";
 
 assert s.sub("[a-z]", "x") == "Hxllo, World!";
 assert s.gsub("[a-z]", "x") == "Hxxxx, Wxxxx!";
 assert s.gsub("([A-Z])", "<$1>") == "<H>ello, <W>orld!";
 
 assert @"\d+" == "\\d+";
 assert @"the windows path is c:\here\there\everywhere\virus.exe" == "the windows path is c:\\here\\there\\everywhere\\virus.exe";
 assert @"C:\Foo\Bar\Baz\" == "C:\\Foo\\Bar\\Baz\\";
 assert @"I said, ""Hello there.""" == 'I said, "Hello there."';
 assert @"I said, ""Hello there.""" == "I said, \"Hello there.\"";
}

# Test that we can generate code for a function with an unused argument.
function unused_argument(unused: int) : void {}

# Test that we can group formal parameters of the same type.
function rectangle_f1(x: int, y: int, width: int, height: int) : int {
 return x+y+width+height;
}
function rectangle_f2(x,y,width,height: int) : int {
 return x+y+width+height;
}
assert rectangle_f1(1, 2, 3, 4) == rectangle_f2(1, 2, 3, 4);
