#!/usr/bin/talc

# Prints Pascal's triangle.
# http://en.wikipedia.org/wiki/Pascal%27s_triangle

size := 13;

# FIXME: list should have something like n_copies(n: int, item: T).
function n_zeros(n: int) : list<int> {
    result: list<int> = [];
    for (i := 0; i < n; ++i) {
        result.push_back(0);
    }
    return result;
}

# FIXME: list (and any other mutable containers) should have something like copy().
function copy(l: list<int>) : list<int> {
    result: list<int> = [];
    for (i := 0; i< l.length(); ++i) {
        result.push_back(l.get(i));
    }
    return result;
}

# FIXME: string should have something like n_copies(n: int, s: string).
function n_spaces(n: int) : string {
    result := '';
    for (i := 0; i < n; ++i) {
        result += ' ';
    }
    return result;
}

# FIXME: this is an example that would really benefit from operator[].
prev: list<int> = n_zeros(size);
next: list<int> = n_zeros(size);
next.put(0, 1);
for (i := 0; i < size-1; ++i) {
    print(n_spaces((size*3)-3*i), next.get(0));
    if (i > 0) {
        for (j := 1; j <= i; ++j) {
            next.put(j, prev.get(j)+prev.get(j-1));
            # FIXME: we could do with some kind of "format using" here.
            s := next.get(j).to_s();
            s = n_spaces(6 - s.length()) + s;
            print(s);
        }
    }
    puts();
    prev = copy(next);
}
exit(0);
